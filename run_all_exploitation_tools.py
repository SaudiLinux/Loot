#!/usr/bin/env python3
"""
Master script to run all exploitation tools at once
جميع أدوات استغلال الثغرات في أمر واحد
"""

import subprocess
import sys
import time
import datetime
import json
import os

def run_tool(tool_name, command):
    """Run a tool and capture its output"""
    print(f"\n{'='*60}")
    print(f"🚀 تشغيل: {tool_name}")
    print(f"الأمر: {command}")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=300)
        print(f"✅ تم بنجاح - رمز الخروج: {result.returncode}")
        if result.stdout:
            print(f"المخرجات:\n{result.stdout[:500]}...")  # Show first 500 chars
        if result.stderr:
            print(f"الأخطاء:\n{result.stderr[:300]}...")  # Show first 300 chars
        return True
    except subprocess.TimeoutExpired:
        print(f"⏰ انتهت المهلة لـ {tool_name}")
        return False
    except Exception as e:
        print(f"❌ خطأ في {tool_name}: {str(e)}")
        return False

def main():
    """Run all exploitation tools"""
    print("""
    ╔══════════════════════════════════════════════════════════════════════╗
    ║               أدوات استغلال الثغرات - تشغيل شامل                   ║
    ║              Vulnerability Exploitation Tools - Full Run             ║
    ╚══════════════════════════════════════════════════════════════════════╝
    """)
    
    # Get current timestamp
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # Define all tools to run
    tools = [
        {
            "name": "Practical Exploitation Tool",
            "command": f"python practical_exploitation.py --demo all --output exploitation_full_{timestamp}.json",
            "description": "أداة الاستغلال العملي لجميع الثغرات"
        },
        {
            "name": "Proof of Concept Tool", 
            "command": "python poc_exploitation.py --target http://example-vulnerable-app.com --test all",
            "description": "أداة اثبات المفهوم للثغرات"
        },
        {
            "name": "Arabic Exploitation Demo",
            "command": "python arabic_exploitation_demo.py --demo all",
            "description": "العرض التوضيحي بالعربية"
        },
        {
            "name": "Zero Day Tool",
            "command": "python zero_day_tool.py --demo-mode",
            "description": "أداة الثغرات الصفرية"
        },
        {
            "name": "Exploitation Tools Module",
            "command": "python exploitation_tools.py --demo",
            "description": "وحدة أدوات الاستغلال"
        }
    ]
    
    # Track results
    results = {
        "timestamp": timestamp,
        "total_tools": len(tools),
        "successful_tools": 0,
        "failed_tools": 0,
        "tool_results": []
    }
    
    print(f"📅 بدء التشغيل: {datetime.datetime.now()}")
    print(f"🛠️ عدد الأدوات: {len(tools)}")
    print(f"📁 سيتم حفظ النتائج في: exploitation_full_{timestamp}.json")
    
    # Run each tool
    for i, tool in enumerate(tools, 1):
        print(f"\n📋 [{i}/{len(tools)}] {tool['name']}")
        print(f"📝 {tool['description']}")
        
        success = run_tool(tool['name'], tool['command'])
        
        tool_result = {
            "name": tool['name'],
            "command": tool['command'],
            "description": tool['description'],
            "success": success,
            "timestamp": datetime.datetime.now().isoformat()
        }
        results["tool_results"].append(tool_result)
        
        if success:
            results["successful_tools"] += 1
        else:
            results["failed_tools"] += 1
            
        # Small delay between tools
        time.sleep(2)
    
    # Generate summary report
    print(f"\n{'='*60}")
    print("📊 ملخص النتائج")
    print(f"{'='*60}")
    print(f"✅ الأدوات الناجحة: {results['successful_tools']}/{results['total_tools']}")
    print(f"❌ الأدوات الفاشلة: {results['failed_tools']}/{results['total_tools']}")
    print(f"📈 نسبة النجاح: {(results['successful_tools']/results['total_tools']*100):.1f}%")
    
    # Save results to file
    results_file = f"exploitation_master_results_{timestamp}.json"
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\n💾 تم حفظ النتائج في: {results_file}")
    
    # Generate final report
    generate_final_report(results, timestamp)
    
    print(f"\n🎉 اكتمل تشغيل جميع الأدوات!")
    print(f"⏰ وقت الانتهاء: {datetime.datetime.now()}")

def generate_final_report(results, timestamp):
    """Generate a final comprehensive report"""
    report_content = f"""# تقرير نهائي: تشغيل جميع أدوات استغلال الثغرات

## معلومات التشغيل
- **التاريخ والوقت**: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
- **معرف التشغيل**: {timestamp}
- **إجمالي الأدوات**: {results['total_tools']}
- **الأدوات الناجحة**: {results['successful_tools']}
- **نسبة النجاح**: {(results['successful_tools']/results['total_tools']*100):.1f}%

## نتائج كل أداة

"""
    
    for tool_result in results['tool_results']:
        status = "✅ ناجح" if tool_result['success'] else "❌ فاشل"
        report_content += f"""
### {tool_result['name']}
- **الحالة**: {status}
- **الوصف**: {tool_result['description']}
- **الأمر**: `{tool_result['command']}`
- **الوقت**: {tool_result['timestamp']}

"""
    
    report_content += f"""
## التوصيات

### للنتائج الناجحة:
- ✅ تم تشغيل الأدوات بنجاح وإنتاج تقارير مفصلة
- 📋 تحقق من ملفات JSON الناتجة للحصول على تفاصيل الاستغلال
- 📊 استخدم التقارير لتحسين أمان أنظمتك

### للنتائج الفاشلة:
- 🔧 تحقق من تثبيت المتطلبات
- 📚 راجع سجلات الأخطاء للحصول على تفاصيل
- 🔄 حاول تشغيل الأدوات بشكل فردي للتشخيص

## الملفات الناتجة
- تقرير النتائج: `exploitation_master_results_{timestamp}.json`
- تقارير الاستغلال: `exploitation_full_{timestamp}.json`
- تقارير عربية: `arabic_exploitation_results_*.json`
- تقارير PoC: `poc_report_*.md`
- تقارير عملية: `practical_exploitation_report_*.md`

---

**ملاحظة**: هذا التقرير تم إنشاؤه تلقائياً من تشغيل جميع أدوات استغلال الثغرات.
"""
    
    report_file = f"تقرير_تشغيل_الادوات_{timestamp}.md"
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report_content)
    
    print(f"📝 تم إنشاء تقرير نهائي: {report_file}")

if __name__ == "__main__":
    main()